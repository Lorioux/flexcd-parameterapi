# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Parameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, description=None, default=None, command_id=None, workflow_id=None):  # noqa: E501
        """Parameter - a model defined in OpenAPI

        :param id: The id of this Parameter.  # noqa: E501
        :type id: str
        :param name: The name of this Parameter.  # noqa: E501
        :type name: str
        :param description: The description of this Parameter.  # noqa: E501
        :type description: str
        :param default: The default of this Parameter.  # noqa: E501
        :type default: str
        :param command_id: The command_id of this Parameter.  # noqa: E501
        :type command_id: str
        :param workflow_id: The workflow_id of this Parameter.  # noqa: E501
        :type workflow_id: str
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'description': str,
            'default': str,
            'command_id': str,
            'workflow_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'default': 'default',
            'command_id': 'commandId',
            'workflow_id': 'workflowId'
        }

        self._id = id
        self._name = name
        self._description = description
        self._default = default
        self._command_id = command_id
        self._workflow_id = workflow_id

    @classmethod
    def from_dict(cls, dikt) -> 'Parameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Parameter of this Parameter.  # noqa: E501
        :rtype: Parameter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Parameter.


        :return: The id of this Parameter.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Parameter.


        :param id: The id of this Parameter.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Parameter.


        :return: The name of this Parameter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Parameter.


        :param name: The name of this Parameter.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Parameter.


        :return: The description of this Parameter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Parameter.


        :param description: The description of this Parameter.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def default(self):
        """Gets the default of this Parameter.


        :return: The default of this Parameter.
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Parameter.


        :param default: The default of this Parameter.
        :type default: str
        """
        if default is None:
            raise ValueError("Invalid value for `default`, must not be `None`")  # noqa: E501

        self._default = default

    @property
    def command_id(self):
        """Gets the command_id of this Parameter.


        :return: The command_id of this Parameter.
        :rtype: str
        """
        return self._command_id

    @command_id.setter
    def command_id(self, command_id):
        """Sets the command_id of this Parameter.


        :param command_id: The command_id of this Parameter.
        :type command_id: str
        """
        if command_id is None:
            raise ValueError("Invalid value for `command_id`, must not be `None`")  # noqa: E501

        self._command_id = command_id

    @property
    def workflow_id(self):
        """Gets the workflow_id of this Parameter.


        :return: The workflow_id of this Parameter.
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this Parameter.


        :param workflow_id: The workflow_id of this Parameter.
        :type workflow_id: str
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")  # noqa: E501

        self._workflow_id = workflow_id
